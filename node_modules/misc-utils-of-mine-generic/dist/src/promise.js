"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Execute given functions returning promises serially. Returns a promise that resolves when all finish with they results as array.
 */
function serial(p) {
    return new Promise(function (resolve) {
        p.reduce(function (promiseChain, currentTask) {
            return promiseChain.then(function (chainResults) {
                return currentTask().then(function (currentResult) { return chainResults.concat([currentResult]); });
            });
        }, Promise.resolve([])).then(function (arrayOfResults) {
            resolve(arrayOfResults);
        });
    });
}
exports.serial = serial;
/**
 * Promise like object that allows to resolve it promise from outside code. Example:
 *
```
class Api {
  fooReady = new Deferred<Data>()
  private knower() {
    inOtherMoment(data=>{
      this.fooReady.resolve(data)
    })
  }
}
```
 */
var Deferred = /** @class */ (function () {
    function Deferred(callback) {
        var instance = this;
        this.resolve = null;
        this.reject = null;
        this.status = 'pending';
        this.promise = new Promise(function (resolve, reject) {
            instance.resolve = function () { this.status = 'resolved'; resolve.apply(this, arguments); };
            instance.reject = function () { this.status = 'rejected'; reject.apply(this, arguments); };
        });
        if (typeof callback === 'function') {
            callback.call(this, this.resolve, this.reject);
        }
    }
    Deferred.prototype.then = function (resolve) {
        return this.promise.then(resolve);
    };
    Deferred.prototype.catch = function (r) {
        return this.promise.catch(r);
    };
    return Deferred;
}());
exports.Deferred = Deferred;
//# sourceMappingURL=promise.js.map