"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * List given enum keys as array. Must be used on enums with declared values (enum E {a='a', b='b'}, if not
 * values could be also returned . For enums without declared values, use enumNoValueKeys
 */
function enumKeys(anEnum) {
    var a = [];
    for (var i in anEnum) {
        a.push(i);
    }
    return a;
}
exports.enumKeys = enumKeys;
/**
 * List given enum keys as array. Differently to [[enumKeys]], is should be used only on enums that doesn't
 * have assigned values or other wise on those which values are identical to the keys or not strings. If not,
 * they will be returned also!
 */
function enumNoValueKeys(anEnum) {
    return Object.keys(anEnum)
        .map(function (i) { return anEnum[i]; })
        .filter(function (s, i, a) { return typeof s === 'string' && a.indexOf(s) === i; });
}
exports.enumNoValueKeys = enumNoValueKeys;
/**
 * Returns the key of the first property with given value of given enum
 */
function getEnumKey(anEnum, value) {
    for (var key in anEnum) {
        if (value === anEnum[key]) {
            return key;
        }
    }
    return '';
}
exports.getEnumKey = getEnumKey;
/**
 * Return given enum as a {name, value} array.
 */
function getEnumKeyAndValue(e) {
    var a = [];
    for (var key in e) {
        a.push({ key: key, value: e[key] });
    }
    return a;
}
exports.getEnumKeyAndValue = getEnumKeyAndValue;
//# sourceMappingURL=enumKeys.js.map